name: Build

on:
 workflow_dispatch:
 pull_request:
    branches:
      - main
 push:
   tags:
     - "v*.*.*"
   paths:
     - '.github/workflows/**'
     - 'templates/**'
     - 'src/**'
     - 'requirements.txt'
   branches:
     - main
 release:
   types: [published]
defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build release binaries

    strategy:
      fail-fast: false
      matrix:
        os:
      #    - macos
      #    - ubuntu
          - windows

    runs-on: ${{ matrix.os }}-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cache Directories
        run: |
          echo "SETTING UP CACHE DIRECTORIES"
          echo "PIP_CACHE_DIR=${{ github.action_path }}/cache/pip" >> $GITHUB_ENV
          echo "NUITKA_CACHE_DIR=${{ github.action_path }}/cache/nuitka" >> $GITHUB_ENV
          mkdir ${{ github.action_path }}/cache
          mkdir ${{ github.action_path }}/cache/nuitka
          mkdir ${{ github.action_path }}/cache/pip
      - name: Debug Show Cache Directories
        run: |
          echo "pip cache dir -> $PIP_CACHE_DIR"
          echo "nuitka cache dir -> $NUITKA_CACHE_DIR"
      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ${{env.PIP_CACHE_DIR}}
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Save pip cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{env.PIP_CACHE_DIR}}
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Setup Env Vars
        run: |
          echo "REF_NAME=${GITHUB_REF_NAME//\//_}" >> $GITHUB_ENV
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Release Versioning
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "__version__='${{env.REF_NAME}}'" > src/_version.py

      - name: Nightly Versioning
        if: true && !startsWith(github.ref, 'refs/tags/')
        run: |
          echo "__version__='nightly-${{github.sha}}'" > src/_version.py

      - name: Build with pyinstaller
        if: true && !startsWith(github.ref, 'refs/tags/') && github.event_name == 'pull_request'
        run: |
          python -m pip install pyinstaller
          pyinstaller --icon=images/logo.ico --noconsole --onefile \
          --collect-binaries python312.dll --hidden-import=aiosqlite \
          --hidden-import=pyttsx4.drivers --hidden-import=pyttsx4.drivers.sapi5 \
          --distpath dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/ \
          --name=twitchchatdnd-nightly src/main.py

      # - name: Release Build with pyinstaller
      #   if: startsWith(github.ref, 'refs/tags/')
      #   run: |
      #     python -m pip install pyinstaller
      #     pyinstaller --icon=images/logo.ico --noconsole --onefile \
      #     --collect-binaries python312.dll --hidden-import=aiosqlite \
      #     --hidden-import=pyttsx4.drivers --hidden-import=pyttsx4.drivers.sapi5 \
      #     --distpath dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/ \
      #     --name=twitchchatdnd src/main.py
      - name: Cache Nuitka build
        uses: actions/cache@v4
        id: cache-nuitka
        if: github.event_name != 'pull_request'
        with:
          path: ${{env.NUITKA_CACHE_DIR}}
          key: ${{ matrix.os }}-nuitka-${{ hashFiles('**/*.py', 'requirements.txt') }}
          restore-keys: |
            ${{ matrix.os }}-nuitka-
      - name: Build with nuitka
        if: true && !startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        run: |
          python -m pip install nuitka
          python -m nuitka --standalone --onefile --windows-console-mode=disable --windows-icon-from-ico=images/logo.ico \
            --enable-plugin=tk-inter --include-module=aiosqlite --include-module=pyttsx4.drivers --include-module=pyttsx4.drivers.sapi5 \
            --output-dir=dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/ \
            --nofollow-import-to=elevenlabs.text_to_speech.types.body_text_to_speech_streaming_with_timestamps* \
            --nofollow-import-to=elevenlabs.text_to_speech.types.body_text_to_speech_with_timestamps* \
            --nofollow-import-to=sqlalchemy.dialects.oracle \
            --nofollow-import-to=sqlalchemy.dialects.mssql \
            --nofollow-import-to=sqlalchemy.dialects.mysql \
            --nofollow-import-to=sqlalchemy.dialects.postgresql \
            --msvc=latest \
            --jobs=4 --lto=no --output-filename=twitchchatdnd-nightly src/main.py

      - name: Release Build with nuitka
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        run: |
          python -m pip install nuitka
          python -m nuitka --standalone --onefile --windows-console-mode=disable --windows-icon-from-ico=images/logo.ico \
          --enable-plugin=tk-inter --include-module=aiosqlite --include-module=pyttsx4.drivers --include-module=pyttsx4.drivers.sapi5 \
          --output-dir=dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/ \
          --nofollow-import-to=elevenlabs.text_to_speech.types.body_text_to_speech_streaming_with_timestamps* \
          --nofollow-import-to=elevenlabs.text_to_speech.types.body_text_to_speech_with_timestamps* \
          --nofollow-import-to=sqlalchemy.dialects.oracle \
          --nofollow-import-to=sqlalchemy.dialects.mssql \
          --nofollow-import-to=sqlalchemy.dialects.mysql \
          --nofollow-import-to=sqlalchemy.dialects.postgresql \
          --msvc=latest \
          --jobs=4 --lto=no --output-filename=twitchchatdnd src/main.py
      - name: Save Nuitka build cache
        if: github.event_name != 'pull_request'
        uses: actions/cache/save@v4
        with:
          path: ${{env.NUITKA_CACHE_DIR}}
          key: ${{ matrix.os }}-nuitka-${{ hashFiles('**/*.py', 'requirements.txt') }}
      - name: Copy Resources
        run: |
          mkdir dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/migrations
          mkdir dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources
          mkdir dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources/images
          mkdir dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources/server
          mkdir dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources/server/static
          mv images/* dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources/images
          mv src/server/static/* dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/resources/server/static
          mv migrations/* dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/migrations
          mv alembic.ini dist/twitchchatdnd/${{ matrix.os }}-${{env.REF_NAME}}/alembic.ini


      - name: Deploy Artifacts
        uses: actions/upload-artifact@v4
        if: true && !startsWith(github.ref, 'refs/tags/')
        with:
          name: twitchchatdnd-${{matrix.os}}-latest
          path: dist/twitchchatdnd/${{matrix.os}}-${{env.REF_NAME}}/
          if-no-files-found: error
          retention-days: 20

      - name: Release Rename
        if: startsWith(github.ref, 'refs/tags/') && !startsWith(matrix.os, 'windows')
        run: |
          mkdir twitchchatdnd-${{env.REF_NAME}}
          mv dist/twitchchatdnd/${{matrix.os}}-${{env.REF_NAME}}/* twitchchatdnd-${{env.REF_NAME}}/
          zip -r twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip twitchchatdnd-${{env.REF_NAME}}

      - name: Release Rename - Windows
        if: startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows')
        run: |
          mkdir twitchchatdnd-${{env.REF_NAME}}
          mv dist/twitchchatdnd/${{matrix.os}}-${{env.REF_NAME}}/* twitchchatdnd-${{env.REF_NAME}}/
          7z a twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip twitchchatdnd-${{env.REF_NAME}}

      - name: Release Artifacts
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        with:
          token: ${{ secrets.TCDND_GITHUB_TOKEN }}
          files: twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip

      - name: Nightly Release Rename
        if: true && !startsWith(github.ref, 'refs/tags/') && !startsWith(matrix.os, 'windows')
        run: |
          mkdir twitchchatdnd-${{env.REF_NAME}}
          mv dist/twitchchatdnd/${{matrix.os}}-${{env.REF_NAME}}/* twitchchatdnd-${{env.REF_NAME}}/
          zip -r twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip twitchchatdnd-${{env.REF_NAME}}

      - name: Nightly Rename - Windows
        if: true && !startsWith(github.ref, 'refs/tags/') && startsWith(matrix.os, 'windows')
        run: |
          mkdir twitchchatdnd-${{env.REF_NAME}}
          mv dist/twitchchatdnd/${{matrix.os}}-${{env.REF_NAME}}/* twitchchatdnd-${{env.REF_NAME}}/
          7z a twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip twitchchatdnd-${{env.REF_NAME}}

      - name: Release nightly
        uses: softprops/action-gh-release@v2
        if: true && startsWith(github.ref_name, 'main')
        with:
          token: ${{ secrets.TCDND_GITHUB_TOKEN }}
          prerelease: true
          name: nightly
          tag_name: nightly
          files: twitchchatdnd-${{matrix.os}}-${{env.REF_NAME}}.zip
          fail_on_unmatched_files: true
